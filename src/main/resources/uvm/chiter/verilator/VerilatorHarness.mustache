#include "V{{dutName}}.h"
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>

#define TOP_CLASS V{{dutName}}
#define VERILATED_C VerilatedVcdC

static bool finishTrig = false;
void vl_finish(const char* filename, int linenum, const char* hier) {
  Verilated::runFlushCallbacks();
  finishTrig = true;
}

static bool fatalTrig = false;
void vl_fatal(const char* filename, int linenum, const char* hier, const char* msg) {
  std::cerr << "fatal! (" << filename << ", " << linenum << ", " << hier << ", " << msg << ")" << std::endl;
  Verilated::runFlushCallbacks();
  fatalTrig = true;
}

static bool stopTrig = false;
void vl_stop(const char* filename, int linenum, const char* hier) {
  Verilated::runFlushCallbacks();
  stopTrig = true;
}

double sc_time_stamp() { return 0; }

struct sim_state {
    TOP_CLASS* dut;
    VERILATED_C* tfp;
    VerilatedContext* contextp;

    sim_state(): dut(nullptr), tfp(nullptr), contextp(nullptr) {}

    inline void init(const std::string& dumpfile) {
        dut = new TOP_CLASS;
        tfp = new VERILATED_C;
        contextp = new VerilatedContext;

        dut->trace(tfp, 99);
        tfp->open(dumpfile.c_str());
    }
};

static sim_state* create_sim_state() {
    Verilated::traceEverOn(true);
    sim_state* s = new sim_state();
    s->init("{{vcdFilePath}}");
    return s;
}

#define _EXPORT __attribute__((visibility("default")))

extern "C" {
    _EXPORT void* sim_init() {
        return (void*) create_sim_state();
    }

    _EXPORT int64_t get_time(void* s) {
        return ((sim_state*)s)->contextp->time();
    }

    _EXPORT void update(void* s) {
        ((sim_state*)s)->dut->eval();
    }

    _EXPORT void finish(void* s) {
        sim_state* ss = (sim_state*)s;
        ss->dut->eval();
        ss->tfp->close();
        ss->dut->final();
        delete ss->tfp;
        delete ss->dut;
        delete ss->contextp;
    }

    _EXPORT void set_args(int32_t argc, const char** argv) {
        Verilated::commandArgs(argc, argv);
    }

    _EXPORT int64_t step(void* s, int32_t cycles) {
        sim_state* ss = (sim_state*)s;
        for (int32_t i = 0; i < cycles; i++) {
            int64_t j = (int64_t)(i + 1);
            ss->dut->eval();
            ss->tfp->dump(ss->contextp->time());
            ss->contextp->timeInc(1);
            if (stopTrig) {
                return (((int64_t)2) << 32) | j;
            } else if (finishTrig) {
                return (((int64_t)1) << 32) | j;
            } else if (fatalTrig) {
                return (((int64_t)3) << 32) | j;
            }
        }
        return (int64_t)cycles;
    }

    _EXPORT void poke(void* s, int32_t id, int32_t offset, int64_t value) {
        sim_state* ss = (sim_state*)s;
        const uint64_t u = value;
        WData* data = nullptr;
        size_t words = 0;
        //std::cout << "poke" << id << "(" << data << ")" << " to " << u << std::endl;
        switch(id) {
            {{&pokeSwitches}}
            default:
                std::cerr << "Cannot find the object of id = " << id << std::endl;
                finish(s);
                break;
        }
        const size_t pos = offset * 2;
        if (pos >= words || pos < 0) {
            std::cerr << "Out of bounds index for id = " << id << " index = " << offset << std::endl;
            finish(s);
        } else if (pos + 1 >= words) {
            data[pos] = u;
        } else {
            data[pos] = u & 0xffffffffu;
            data[pos + 1] = (u >> 32) & 0xffffffffu;
        }
    }

    _EXPORT int64_t peek(void* s, int32_t id, int32_t offset) {
        sim_state* ss = (sim_state*)s;
        WData* data = nullptr;
        size_t words = 0;
        switch(id) {
            {{&peekSwitches}}
            default:
                std::cerr << "Cannot find the object of id = " << id << std::endl;
                finish(s);
                return -1;
        }
        const size_t pos = offset * 2;
        //std::cout << "peek" << id << "(" << data << ")" << std::endl;
        if (pos >= words || pos < 0) {
            std::cerr << "Out of bounds index for id = " << id << " index = " << offset << std::endl;
            finish(s);
            return -1;
        } else if (pos + 1 >= words) {
            return (uint64_t)data[pos];
        } else {
            return (((uint64_t)data[pos + 1]) << 32) | ((uint64_t)data[pos]);
        }
    }
}